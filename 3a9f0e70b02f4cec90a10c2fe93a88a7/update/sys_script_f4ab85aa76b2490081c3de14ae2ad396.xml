<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<record_update table="sys_script">
  <sys_script action="INSERT_OR_UPDATE">
    <abort_action>false</abort_action>
    <access>package_private</access>
    <action_delete>false</action_delete>
    <action_insert>true</action_insert>
    <action_query>false</action_query>
    <action_update>true</action_update>
    <active>true</active>
    <add_message>false</add_message>
    <advanced>true</advanced>
    <change_fields>false</change_fields>
    <client_callable>false</client_callable>
    <collection>incident</collection>
    <condition/>
    <description/>
    <execute_function>false</execute_function>
    <filter_condition>assigned_toISNOTEMPTY^EQ</filter_condition>
    <is_rest>false</is_rest>
    <message/>
    <name>SLA响应触发(开始)</name>
    <order>80</order>
    <priority>100</priority>
    <rest_method/>
    <rest_method_text/>
    <rest_service/>
    <rest_service_text/>
    <rest_variables/>
    <role_conditions/>
    <script>slaTask();

function slaTask() {
  var target = "1";
  // 1.查询SLA响应配置
  var grSla = new GlideRecord('contract_sla');
  grSla.addQuery('table', "incident");
  grSla.addQuery('target', target);
  grSla.query();
  var contract_sla = null;
  if (grSla.hasNext()) {
    contract_sla = grSla.next();
    //gs.print("SLA响应配置:" + contract_sla.sys_id);
  }
  if (contract_sla == null) {
    return;
  }
  
  var incident_id = current.getValue("sys_id");
  var sla_id = contract_sla.sys_id + "";

  // 2.查询SLA任务是否已存在
  var grTaskSla = new GlideRecord('task_sla');
  grTaskSla.addQuery('task', incident_id);
  grTaskSla.addQuery('sla', sla_id);
  grTaskSla.addQuery('target', "1");
  grTaskSla.query();
  var task_sla = null;
  if (grTaskSla.hasNext()) {
    task_sla = grTaskSla.next();
  }
  if (task_sla != null) {
    //gs.print("SLA响应任务已存在:" + task_sla.sys_id);
    return;
  }

  // 3.创建SLA任务
  grTaskSla.setValue("sla", sla_id);
  grTaskSla.setValue("task", incident_id);
  grTaskSla.setValue("target", target);
  grTaskSla.setValue("stage", "in_progress");
  var dateUtils = new DateUtils();
  // 设置开始时间  
  var start_time = dateUtils.getCurrentDateTime();
  grTaskSla.setValue("start_time", start_time);
  // 设置违约时间
  var breach_time = dateUtils.addHour(start_time, contract_sla.duration_str);
  grTaskSla.setValue("breach_time", breach_time);
  grTaskSla.setValue("has_breached", false);
  grTaskSla.insert();
  //gs.print("SLA响应任务创建成功");
}</script>
    <sys_class_name>sys_script</sys_class_name>
    <sys_created_by>litao</sys_created_by>
    <sys_created_on>2022-06-07 22:27:17</sys_created_on>
    <sys_domain>global</sys_domain>
    <sys_domain_path>/</sys_domain_path>
    <sys_effective/>
    <sys_id>f4ab85aa76b2490081c3de14ae2ad396</sys_id>
    <sys_mod_count>1</sys_mod_count>
    <sys_name/>
    <sys_overrides/>
    <sys_package/>
    <sys_policy/>
    <sys_scope>3a9f0e70b02f4cec90a10c2fe93a88a7</sys_scope>
    <sys_update_name/>
    <sys_updated_by>litao</sys_updated_by>
    <sys_updated_on>2022-06-09 10:49:44</sys_updated_on>
    <template/>
    <when>after</when>
  </sys_script>
</record_update>
