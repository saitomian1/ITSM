<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<record_update table="sys_ui_action">
  <sys_ui_action action="INSERT_OR_UPDATE">
    <action_name>sysverb_update</action_name>
    <active>true</active>
    <client>true</client>
    <client_script_v2/>
    <comments/>
    <condition/>
    <form_action>false</form_action>
    <form_button>true</form_button>
    <form_button_v2>false</form_button_v2>
    <form_context_menu>false</form_context_menu>
    <form_link>false</form_link>
    <form_menu_button_v2>false</form_menu_button_v2>
    <form_style>primary</form_style>
    <hint/>
    <isolate_script>false</isolate_script>
    <list_action>false</list_action>
    <list_banner_button>false</list_banner_button>
    <list_button>false</list_button>
    <list_choice>false</list_choice>
    <list_context_menu>false</list_context_menu>
    <list_link>false</list_link>
    <list_save_with_form_button>false</list_save_with_form_button>
    <list_style/>
    <messages/>
    <name>更新</name>
    <onclick>update()</onclick>
    <order>100</order>
    <script>function update() {
  var incident_state = g_form.getValue("incident_state");
  if (incident_state == 6 || incident_state == 7) {
    //解决时, 解析码,关闭说明不能为空  (临时写法 应该写到业务规则里)
    var close_code = g_form.getValue("close_code");
    var close_notes = g_form.getValue("close_notes");
    var msg = new GwtMessage();
    var flg = false;
    if (!close_code) {
      flg = true;
      msg.addErrorMessage('解决信息:解析码不能为空');
    }
    if (!close_notes) {
      flg = true;
      msg.addErrorMessage('解决信息:关闭说明不能为空');
    }
    if (flg) {
      return;
    }
  }

  var ga = new GlideAjax('UserUtils');
  ga.addParam('sysparm_name', 'getUser');
  ga.getJson(response =&gt; {
    debugger;
    if (response.data == null || response.status != "success") {
      var msg = new GwtMessage();
      msg.addErrorMessage('查询用户信息异常');
      return;
    }
    var user = response.data.user;
    if (incident_state == 7 &amp;&amp; g_form.getValue("caller_id") != user.id &amp;&amp; !user.roles.includes("admin")) {
      var msg = new GwtMessage();
      msg.addErrorMessage('非呼叫者或admin不能修改事件为关闭');
      return;
    }

    // 1.记录事件修改状态
    var changeGa = new GlideAjax('ChangeIncidentRecord');
    changeGa.addParam('sysparm_name', 'addRecord'); //方法名称
    changeGa.addParam('sys_id', current.sys_id);
    changeGa.addParam('incident_state', g_form.getValue("incident_state"));
    changeGa.addParam('work_notes', g_form.getValue("work_notes"));
    changeGa.addParam('assignment_group', g_form.getValue("assignment_group"));
    changeGa.addParam('assigned_to', g_form.getValue("assigned_to"));
    changeGa.addParam('watch_list', g_form.getValue("watch_list"));
    changeGa.addParam('caller_id', g_form.getValue("caller_id"));
    changeGa.getJson(response =&gt; {
      //debugger;
      if (response.data == null || response.status != "success") {
        var msg = new GwtMessage();
        msg.addErrorMessage('记录事件状态异常');
        return;
      }

      // 2.点击更新时设置子事件状态
      var gaUc = new GlideAjax('ParentChildIncident');
      gaUc.addParam('sysparm_name', 'updateChildren'); //方法名称
      gaUc.addParam('parent_sys_id', current.sys_id);
      gaUc.addParam('parent_incident_state', g_form.getValue("incident_state"));
      gaUc.addParam('close_code', g_form.getValue("close_code"));
      gaUc.addParam('close_notes', g_form.getValue("close_notes"));
      gaUc.getJson(response =&gt; {
        //debugger;
        if (response.data == null || response.status != "success") {
          var msg = new GwtMessage();
          msg.addErrorMessage('子事件设置为以解决异常');
          return;
        }

        // 3.根据父事件 设置 当前事件状态
        var ga = new GlideAjax('ParentChildIncident');
        ga.addParam('sysparm_name', 'updateStateByParent'); //方法名称
        ga.addParam('parent_sys_id', g_form.getValue("parent_incident"));
        ga.addParam('incident_state', g_form.getValue("incident_state"));
        ga.getJson(response =&gt; {
          //debugger;
          if (response.data == null || response.status != "success") {
            var msg = new GwtMessage();
            msg.addErrorMessage('获取父事件状态异常');
            return;
          }
          if (response.data.result) {
            var incident = response.data.result;
            g_form.setValue("incident_state", incident.incident_state);
            g_form.setValue("close_code", incident.close_code);
            g_form.setValue("close_notes", incident.close_notes);
          }
          //更新停留当前页面
          current.update(function() {
            window.location.reload();
          }, {
            prevent: true
          });

        });
      });
    });
  });
}</script>
    <show_insert>false</show_insert>
    <show_multiple_update>false</show_multiple_update>
    <show_query>false</show_query>
    <show_update>true</show_update>
    <sys_class_name>sys_ui_action</sys_class_name>
    <sys_created_by>litao</sys_created_by>
    <sys_created_on>2022-06-02 00:47:34</sys_created_on>
    <sys_domain>global</sys_domain>
    <sys_domain_path>/</sys_domain_path>
    <sys_effective/>
    <sys_id>57b9e221b14a4604a83ba08c609cde66</sys_id>
    <sys_mod_count>1</sys_mod_count>
    <sys_name/>
    <sys_overrides>9eb4298fb710430b8e83ada9e3b85847</sys_overrides>
    <sys_package/>
    <sys_policy/>
    <sys_scope>3a9f0e70b02f4cec90a10c2fe93a88a7</sys_scope>
    <sys_update_name/>
    <sys_updated_by>litao</sys_updated_by>
    <sys_updated_on>2022-06-09 13:25:40</sys_updated_on>
    <table>incident</table>
  </sys_ui_action>
</record_update>
